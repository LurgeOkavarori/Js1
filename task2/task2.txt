1)
var a = 1, b = 1, c, d;
c = ++a; alert(c);           // 2
d = b++; alert(d);           // 1
c = (2+ ++a); alert(c);      // 5
d = (2+ b++); alert(d);      // 4
alert(a);                    // 3
alert(b);                    // 3

Первые 2 результата после объявления переменных оказались такими по следующей причине:
оператор ++ сам по себе увеличивает переменную на 1, но когда он стоит до переменной он имеет «Префиксную форму» и возвращает значеие новое, уже после операции, а когда он находится после переменной,
то у него получается "Постфиксная форма" и он возвращает старое значение этой переменной до операции с ней.
По Аналогии работает и со следующими 2мя вариантами: c = (2+ ++a); alert(c); - сначала выполняется ++a, тоесть a, которое после прошлого примера равно 2, увеличивается на 1, получаем 3, а затем прибавляет 2+3 и получаем 5;
d = (2+ b++); alert(d) - сначала выполняем b++, котрое после прошлых строк кода тоже равно 2, хоть и алерт показал 1, из-за разницы в вовзращенном значении, однако при увеличении его на 1 и последующем алерте, оно вернет значение
этого числа 2, затем прибавим 2+2 и получаем 4.
Что касается alert(a), alert(b) в конце, то по сути из-за инкремента их значение каждый раз все-равно увеличивалось на 1, хоть в алерте и возвращало старые значения. Поэтому a(1)+1+1=3, по той же аналогии и b.

2)
var a = 2;
var x = 1 + (a *= 2);

x = 5, так как a *= 2 - это короткая запись a = a * 2, получается 2*2=4 и потом прибавляем 1 и полчаем 5;

7)
alert( null > 0 ); false
alert( null == 0 ); false
alert( null >= 0 ); true

Сравнения преобразуют null в число, равное 0. Поэтому выражение null >= 0 истинно, а null > 0 ложно. А значение "null" при нестрогом равенстве ни к чему не приводится - оно равно друг другу и не равно ничему другому.
